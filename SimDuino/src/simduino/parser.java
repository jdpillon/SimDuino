
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jan 24 12:39:58 CET 2015
//----------------------------------------------------

import java_cup.runtime.*;
import simduino.Coil;
import simduino.Contact;
import simduino.ContactNode;
import simduino.Rung;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;

/** CUP v0.10k generated parser.
  * @version Sat Jan 24 12:39:58 CET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\011\003\000\002\010" +
    "\016\000\002\007\015\000\002\006\013\000\002\006\002" +
    "\000\002\005\022\000\002\004\023\000\002\004\002\000" +
    "\002\003\014\000\002\013\003\000\002\012\003\000\002" +
    "\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\004\007\005\001\002\000\004\002\000\001" +
    "\002\000\004\004\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\011\011\001\002\000" +
    "\004\026\012\001\002\000\004\005\013\001\002\000\004" +
    "\026\014\001\002\000\004\027\ufff7\001\002\000\004\027" +
    "\016\001\002\000\004\005\017\001\002\000\004\027\020" +
    "\001\002\000\004\004\ufff5\001\002\000\004\004\022\001" +
    "\002\000\004\010\023\001\002\000\004\007\024\001\002" +
    "\000\004\012\026\001\002\000\004\002\uffff\001\002\000" +
    "\004\013\027\001\002\000\004\005\030\001\002\000\004" +
    "\025\031\001\002\000\014\006\ufff6\010\ufff6\021\ufff6\022" +
    "\ufff6\024\ufff6\001\002\000\004\010\033\001\002\000\004" +
    "\007\ufffc\001\002\000\004\007\035\001\002\000\006\006" +
    "\037\014\036\001\002\000\004\010\042\001\002\000\004" +
    "\012\040\001\002\000\004\010\041\001\002\000\004\002" +
    "\ufffe\001\002\000\004\007\043\001\002\000\004\015\051" +
    "\001\002\000\004\007\045\001\002\000\004\006\046\001" +
    "\002\000\004\014\047\001\002\000\004\010\050\001\002" +
    "\000\004\007\ufffd\001\002\000\004\010\052\001\002\000" +
    "\004\007\ufff9\001\002\000\004\007\054\001\002\000\006" +
    "\006\056\017\055\001\002\000\004\020\103\001\002\000" +
    "\004\015\057\001\002\000\004\010\060\001\002\000\004" +
    "\007\061\001\002\000\004\016\062\001\002\000\004\010" +
    "\063\001\002\000\004\007\064\001\002\000\004\023\072" +
    "\001\002\000\004\007\066\001\002\000\004\006\067\001" +
    "\002\000\004\016\070\001\002\000\004\010\071\001\002" +
    "\000\004\007\ufffb\001\002\000\004\022\073\001\002\000" +
    "\004\005\074\001\002\000\004\025\031\001\002\000\004" +
    "\024\076\001\002\000\004\005\077\001\002\000\004\025" +
    "\031\001\002\000\004\006\101\001\002\000\004\010\102" +
    "\001\002\000\004\007\ufff8\001\002\000\004\005\104\001" +
    "\002\000\004\025\031\001\002\000\004\021\106\001\002" +
    "\000\004\005\107\001\002\000\004\025\031\001\002\000" +
    "\004\022\111\001\002\000\004\005\112\001\002\000\004" +
    "\025\031\001\002\000\004\024\114\001\002\000\004\005" +
    "\115\001\002\000\004\025\031\001\002\000\004\006\117" +
    "\001\002\000\004\010\120\001\002\000\004\007\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\006\010\003\011\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





	/*****COSTANTI PER LA GESTIONE DEGLI ERRORI*****/
	public final String PORT_IS_INPUT_OR_OUTPUT="Port is only input or output";
	public final String TYPE_IS_ONLY_0_OR_1="Type is only 0 or 1";
	public final String INVALID_LADDER_DIAGRAM="Invalid ladder diagram";
	/**********/

	/*****STRUTTURE DATI UTILIZZATE*****/
    private HashMap <Integer,Contact>tableInputPort=new HashMap<>();	/*Contiene contatti ladder associati a pin di input (Chiave:Numero del pin di input)*/
    private HashMap <Integer,Coil>tableOutputPort=new HashMap<>();		/*Contiene contatti ladder associati a pin di output (Chiave:Numero del pin di output)*/
    private ArrayList<Rung> rungList=new ArrayList<>();					/*Lista di tutti gli HashMap*/
    /**********/

    /****METEODI GETTER AND SETTER PER OPERARE SULLE STRUTTURE DATI APPENA DICHIARATE****/
    public HashMap getTableInput(){
    	return tableInputPort;
    }

    public HashMap getTableOutput(){
    	return tableOutputPort;
    }

    public ArrayList<Rung> getRungList(){
    	return rungList;
    }
	/**********/

	public void report_error(String message,Object info){
		System.out.println("Syntax Error");
	}

    /****FUNZIONE: handleError(String message)****/
    /**
    * Stampa messaggi di errore e termina il programma di parsing
    **/
	public void handleError(String message){
	 System.out.println(message);
	 System.exit(1);
	}
	/**********/

	public void report_fatal_error(String message,Object info){
	 report_error(message,info);
	 System.exit(1);
	}

    /****FUNZIONE: findMax_ToValue_FromContactList****/
    /**
    * Ciascun oggetto Contact ha un attributo from di tipo int
    * trova il massimo valore dell'attributo from tra tutti i contatti
    * presenti in un rung.
    **/
	public int findMax_ToValue_FromContactList(Rung rung){
		int max=0;
		for(Contact cnt: rung.getSection1()){
			if(cnt.getTo()>max){
				max=cnt.getTo();
			}
		}
		return max;
	}


	public void user_init() {

	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // P ::= ENCODING 
            {
              String RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=val;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*P*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= NUM 
            {
              Integer RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=val;
              CUP$parser$result = new java_cup.runtime.Symbol(8/*I*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // N ::= VERSION 
            {
              String RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=val;
              CUP$parser$result = new java_cup.runtime.Symbol(9/*N*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // G ::= MIN COIL PORT EQUAL I TYPE EQUAL I DIV MAX 
            {
              Object RESULT = null;
		int portleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer port = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

	if(type!=0&&type!=1){
		parser.handleError(parser.TYPE_IS_ONLY_0_OR_1);
	}

	/**
    *Quando facciamo la riduzione per G abbiamo trovato un coil in output
    *Conserviamo le info relative a questo coil inserendolo nella TableOutput.
    **/
	Coil coil=new Coil(port,type);
	if(parser.getTableInput().containsKey(port))
	 parser.handleError(parser.PORT_IS_INPUT_OR_OUTPUT);
	else{
	 if(!parser.getTableOutput().containsKey(port)){
	 	parser.getTableOutput().put(coil.getPort(),coil);
	 }
	}
	RESULT=coil;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*G*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // F ::= 
            {
              Object RESULT = null;
		
	/**
    *Se riduciamo per F stiamo iniziando il parsing di un nuovo rung
    *Quindi bisogna allocare la struttura che contiene i suoi contatti.
    **/
	ArrayList<Contact> listContact;
	listContact=new ArrayList<>();
	RESULT=listContact;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*F*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // F ::= F MIN CONTACT FROM EQUAL I TO EQUAL I PORT EQUAL I TYPE EQUAL I DIV MAX 
            {
              Object RESULT = null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Integer from = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer to = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int portleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer port = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		


	if(type!=0&&type!=1){
		parser.handleError(parser.TYPE_IS_ONLY_0_OR_1);
	}

	/**
    *Quando facciamo la riduzione per F abbiamo trovato un nuovo contatto in input
    *Conserviamo le info relative a questo contatto inserendolo nella TableInput.
    **/
 	Contact contact=new Contact(from,to,port,type);
	if(parser.getTableOutput().containsKey(port))
	 parser.handleError(parser.PORT_IS_INPUT_OR_OUTPUT);
	else if(contact.getFrom()+1!=contact.getTo()){
        parser.handleError(parser.INVALID_LADDER_DIAGRAM);         
    }else{
	 if(!parser.getTableInput().containsKey(port)){
	 	parser.getTableInput().put(contact.getPort(),contact);
	 }
	}

	/**
    *Qui invece conserviamo tutti i contatti relativi allo stesso rung 
    *che costituiranno l'attributo section1 di F nella produzione E
    **/
	((ArrayList<Contact>)array).add(contact);

	RESULT=array;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*F*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= MIN SECTION1 MAX F MIN DIV SECTION1 MAX MIN SECTION2 MAX G MIN DIV SECTION2 MAX 
            {
              Object RESULT = null;
		int section1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int section1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object section1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int section2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int section2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object section2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	/**
    *Ogni rung Ã¨ diviso in due sezioni section1 e section2
    *la section1 contiene solo contatti e la section2 solo un coil.
    *Quando facciamo la riduzione per E il rung Ã¨ completo, quindi possiamo
    *creare un nuovo oggetto Rung e inserirlo nella RungList.
    **/
 	Rung rung=new Rung((ArrayList<Contact>)section1,(Coil)section2);
 	parser.getRungList().add(rung);

              CUP$parser$result = new java_cup.runtime.Symbol(3/*E*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*D*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // D ::= D MIN RUNG MAX E MIN DIV RUNG MAX 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*D*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= MIN PROGRAM FOR EQUAL I MAX D MIN DIV PROGRAM MAX 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*B*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= MIN QUESTION XML VERSION EQUAL N ENCODING EQUAL P QUESTION MAX B 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*A*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= A 
            {
              Object RESULT = null;
		
	/*Questa azione semantica genera il codice in base alle informazioni raccolte precedentemente*/
    Iterator it;

    /**
    *Ogni contatto che appare in un programma ladder ha associato un valore dell'attributo port, che si riferisce 
    *alla porta della scheda arduino di cui si deve leggere la tensione.
    *Per ogni Contact nella HashMap TableInput, bisogna dichiarare nel programma target una variabile che 
    *conterra il valore letto(chiamata "var"+port) e una che memorizzera la porta associata(chiamata "pin"+port).
    **/
    it = parser.getTableInput().entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("int pin"+i+"="+i+";");
        System.out.println("int var"+i+"=0;");
    }
    /**
    *Ogni coil che appare in un programma ladder ha associato un valore dell'attributo port, che si riferisce 
    *alla porta della scheda arduino in cui si deve settare la tensione.
    *Per ogni Coil nella HashMap TableOutput, bisogna dichiarare nel programma target una variabile che 
    *conterra il valore scritto(chiamata "var"+port) e una che memorizzera la porta associata(chiamata "pin"+port).
    *
    **/   
    it = parser.getTableOutput().entrySet().iterator();
    while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("int pin"+i+"="+i+";");
        System.out.println("int var"+i+";");
	}

    /**
    *Ogni programma arduino necessita di una funzione "setup()" per essere eseguito.
    *Questa funzione viene eseguita solo all'avvio del programma.
    *Precedentemente abbiamo associato un pin della scheda arduino ad ogni Contatto in TableInput
    *adesso settiamo tale pin come pin di input, mediante la funzione "pinMode(args)."
    **/   
    it = parser.getTableInput().entrySet().iterator();
    System.out.println("void setup(){");
    while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("	pinMode("+"pin"+i+","+"INPUT"+");");
	}
	/**
    *Per ogni Coil nella HashMap TableOutput, precedentemente abbiamo associato un pin della scheda arduino,
    *adesso settiamo tale pin come pin di output, mediante la funzione "pinMode(args)."
    **/  
	it = parser.getTableOutput().entrySet().iterator();
	while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("	pinMode("+"pin"+i+","+"OUTPUT"+");");
	}
	System.out.println("}");

    /**
    *Ogni programma arduino necessita di una funzione "loop()" per essere eseguito.
    *Questa funzione viene eseguita in continuazione e determina il program-scan
    **/
	System.out.println("void loop(){");

	/**
    *All'inizio del program scan eseguiamo la lettura di tutte le variabili di input
    *tramite la funzione "digitalRead(args)";
    **/
	it = parser.getTableInput().entrySet().iterator();
    while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("	var"+i+"=digitalRead("+"pin"+i+");");
	}


	/**
    *Per ogni rung creaiamo un albero che descrive i suoi contatti
    **/
	ContactNode root;
	it = parser.getRungList().iterator();
	while(it.hasNext()){
	    Object obj = it.next();
		root=new ContactNode((Rung)obj);
		int maxTo=parser.findMax_ToValue_FromContactList((Rung)obj);
		if(!root.buildTree(0,maxTo)){
			parser.handleError(parser.INVALID_LADDER_DIAGRAM);
		}
		/******DEBUG-PRINT TREE*******/
		/*System.out.println("**************************************");
		root.visit();
		System.out.println("**************************************");*/

	/**
    *Attraversando l'albero relativo a un particolare rung in modo depth-first
    *otteniamo l'espressione logica relativa a un rung
    **/
		System.out.println("	if("+root.toString()+"){");
		if(((Coil)((Rung)obj).getSection2()).getType()==0)
			System.out.println("		"+"var"+((Coil)((Rung)obj).getSection2()).getPort()+"=HIGH;");
		else if(((Coil)((Rung)obj).getSection2()).getType()==1)
			System.out.println("		"+"var"+((Coil)((Rung)obj).getSection2()).getPort()+"=LOW;");
		System.out.println("	}else{");
		if(((Coil)((Rung)obj).getSection2()).getType()==0)
			System.out.println("		"+"var"+((Coil)((Rung)obj).getSection2()).getPort()+"=LOW;");
		else if(((Coil)((Rung)obj).getSection2()).getType()==1)
			System.out.println("		"+"var"+((Coil)((Rung)obj).getSection2()).getPort()+"=HIGH;");
		System.out.println("	}");
	}


	

	/******DEBUG-PRINT RUNG*******/
	/*System.out.println("**************************************");
	Object obj;
	it = parser.getRungList().iterator();
	while(it.hasNext()){
    	obj = it.next();
    	System.out.println("RUNG");
    	Iterator itr = ((Rung)obj).getSection1().iterator();
    	while(itr.hasNext()){
    	 obj = itr.next();
    	 System.out.println("CONTACT");
    	}

	}
	System.out.println("**************************************");*/

	/**
    *Alla fine del program scan eseguiamo la scrittura di tutte le variabili di output
    *tramite la funzione "digitalWrite(args)";
    **/
	it = parser.getTableOutput().entrySet().iterator();
    while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("	digitalWrite("+"pin"+i+","+"var"+i+");");
	}
	System.out.println("}");


              CUP$parser$result = new java_cup.runtime.Symbol(7/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

