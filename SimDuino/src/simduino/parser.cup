import java_cup.runtime.*;
import simduino.Coil;
import simduino.Contact;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;



parser code {:

	public final String PORT_IS_INPUT_OR_OUTPUT="Port is only input or output";

    private HashMap <Integer,Contact>tableInputPort=new HashMap<>();
    private HashMap <Integer,Coil>tableOutputPort=new HashMap<>();

    public HashMap getTableInput(){
    	return tableInputPort;
    }

    public HashMap getTableOutput(){
    	return tableOutputPort;
    }

	public void report_error(String message,Object info){
		System.out.println("Si e' verificato un errore!");
	}

	public void handleError(String message){
	 System.out.println(message);
	 System.exit(1);
	}

	public void report_fatal_error(String message,Object info){
	 report_error(message,info);
	 System.exit(1);
	}

	public void user_init() {

	}

:};



/*----Declaration of Terminal e NonTerminal----*/

terminal QUESTION,EQUAL,DIV,MIN,MAX,XML,PROGRAM,FOR,RUNG,SECTION1,SECTION2,CONTACT,FROM,TO,PORT,COIL,TYPE;
terminal Integer NUM;
terminal String VERSION,ENCODING;

non terminal Object G,F,E,D,B,A,S;
non terminal Integer I;
non terminal String N,P;
start with S;
/*precedence left MIN,RUNG,MAX,DIV;*/


/*Grammar Section*/
S  ::= A 
{:
    Iterator it;

    it = parser.getTableInput().entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("int pin"+i+"="+i+";");
        System.out.println("int var"+i+"=0;");
    }


    it = parser.getTableInput().entrySet().iterator();
    System.out.println("void setup(){");
    while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("	pinMode("+"pin"+i+","+"INPUT"+");");
	}
	it = parser.getTableOutput().entrySet().iterator();
	while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("	pinMode("+"pin"+i+","+"OUTPUT"+");");
	}
	System.out.println("}");


:};

A ::= MIN QUESTION XML VERSION EQUAL N ENCODING EQUAL P QUESTION MAX B
{::}; 

B ::= MIN PROGRAM FOR EQUAL I MAX D MIN DIV PROGRAM MAX
{::};

D ::= D MIN RUNG MAX E MIN DIV RUNG MAX
{::};

D ::=
{: :};

E ::= MIN SECTION1 MAX F MIN DIV SECTION1 MAX MIN SECTION2 MAX G MIN DIV SECTION2 MAX
{::};

F ::= F MIN CONTACT FROM EQUAL I:from TO EQUAL I:to PORT EQUAL I:port TYPE EQUAL I:type DIV MAX
{:
 	Contact contact=new Contact(from,to,port,type);
	if(parser.getTableOutput().containsKey(port))
	 parser.handleError(parser.PORT_IS_INPUT_OR_OUTPUT);
	else{
	 if(!parser.getTableInput().containsKey(port)){
	 	parser.getTableInput().put(contact.getPort(),contact);
	 }
	}
:};

F ::=
{::};

G ::= MIN COIL PORT EQUAL I:port TYPE EQUAL I:type DIV MAX
{:
	Coil coil=new Coil(port,type);
	if(parser.getTableInput().containsKey(port))
	 parser.handleError(parser.PORT_IS_INPUT_OR_OUTPUT);
	else{
	 if(!parser.getTableOutput().containsKey(port)){
	 	parser.getTableOutput().put(coil.getPort(),coil);
	 }
	}

:};


N ::= VERSION:val {:RESULT=val;:};
I ::= NUM:val {:RESULT=val;:};
P ::= ENCODING:val {:RESULT=val;:};


