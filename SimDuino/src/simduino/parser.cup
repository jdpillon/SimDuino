/*
 * PROGETTO LINGUAGGI E TRADUTTORI
 * Nunzio Meli,Simone Sorge,Alex Finocchiaro
 */

import java_cup.runtime.*;
import simduino.Coil;
import simduino.Contact;
import simduino.ContactNode;
import simduino.Rung;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;



parser code {:


	/*****COSTANTI PER LA GESTIONE DEGLI ERRORI*****/
	public final String PORT_IS_INPUT_OR_OUTPUT="Port is only input or output";
	public final String TYPE_IS_ONLY_0_OR_1="Type is only 0 or 1";
	public final String INVALID_LADDER_DIAGRAM="Invalid ladder diagram";
	/**********/

	/*****STRUTTURE DATI UTILIZZATE*****/
    private HashMap <Integer,Contact>tableInputPort=new HashMap<>();	/*Contiene contatti ladder associati a pin di input (Chiave:Numero del pin di input)*/
    private HashMap <Integer,Coil>tableOutputPort=new HashMap<>();		/*Contiene contatti ladder associati a pin di output (Chiave:Numero del pin di output)*/
    private ArrayList<Rung> rungList=new ArrayList<>();					/*Lista di tutti gli HashMap*/
    /**********/

    /****METEODI GETTER AND SETTER PER OPERARE SULLE STRUTTURE DATI APPENA DICHIARATE****/
    public HashMap getTableInput(){
    	return tableInputPort;
    }

    public HashMap getTableOutput(){
    	return tableOutputPort;
    }

    public ArrayList<Rung> getRungList(){
    	return rungList;
    }
	/**********/

	public void report_error(String message,Object info){
		System.out.println("Syntax Error");
	}

    /****FUNZIONE: handleError(String message)****/
    /**
    * Stampa messaggi di errore e termina il programma di parsing
    **/
	public void handleError(String message){
	 System.out.println(message);
	 System.exit(1);
	}
	/**********/

	public void report_fatal_error(String message,Object info){
	 report_error(message,info);
	 System.exit(1);
	}

    /****FUNZIONE: findMax_ToValue_FromContactList****/
    /**
    * Ciascun oggetto Contact ha un attributo from di tipo int
    * trova il massimo valore dell'attributo from tra tutti i contatti
    * presenti in un rung.
    **/
	public int findMax_ToValue_FromContactList(Rung rung){
		int max=0;
		for(Contact cnt: rung.getSection1()){
			if(cnt.getTo()>max){
				max=cnt.getTo();
			}
		}
		return max;
	}


	public void user_init() {

	}

:};



/*----Dichiarazione Terminali e Non Terminali----*/

terminal QUESTION,EQUAL,DIV,MIN,MAX,XML,PROGRAM,FOR,RUNG,SECTION1,SECTION2,CONTACT,FROM,TO,PORT,COIL,TYPE;
terminal Integer NUM;
terminal String VERSION,ENCODING;

non terminal Object G,F,E,D,B,A,S;
non terminal Integer I;
non terminal String N,P;
start with S;


/*Grammatica*/
S  ::= A 
{:
	/*Questa azione semantica genera il codice in base alle informazioni raccolte precedentemente*/
    Iterator it;

    /**
    *Ogni contatto che appare in un programma ladder ha associato un valore dell'attributo port, che si riferisce 
    *alla porta della scheda arduino di cui si deve leggere la tensione.
    *Per ogni Contact nella HashMap TableInput, bisogna dichiarare nel programma target una variabile che 
    *conterra il valore letto(chiamata "var"+port) e una che memorizzera la porta associata(chiamata "pin"+port).
    **/
    it = parser.getTableInput().entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("int pin"+i+"="+i+";");
        System.out.println("int var"+i+"=0;");
    }
    /**
    *Ogni coil che appare in un programma ladder ha associato un valore dell'attributo port, che si riferisce 
    *alla porta della scheda arduino in cui si deve settare la tensione.
    *Per ogni Coil nella HashMap TableOutput, bisogna dichiarare nel programma target una variabile che 
    *conterra il valore scritto(chiamata "var"+port) e una che memorizzera la porta associata(chiamata "pin"+port).
    *
    **/   
    it = parser.getTableOutput().entrySet().iterator();
    while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("int pin"+i+"="+i+";");
        System.out.println("int var"+i+";");
	}

    /**
    *Ogni programma arduino necessita di una funzione "setup()" per essere eseguito.
    *Questa funzione viene eseguita solo all'avvio del programma.
    *Precedentemente abbiamo associato un pin della scheda arduino ad ogni Contatto in TableInput
    *adesso settiamo tale pin come pin di input, mediante la funzione "pinMode(args)."
    **/   
    it = parser.getTableInput().entrySet().iterator();
    System.out.println("void setup(){");
    while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("	pinMode("+"pin"+i+","+"INPUT"+");");
	}
	/**
    *Per ogni Coil nella HashMap TableOutput, precedentemente abbiamo associato un pin della scheda arduino,
    *adesso settiamo tale pin come pin di output, mediante la funzione "pinMode(args)."
    **/  
	it = parser.getTableOutput().entrySet().iterator();
	while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("	pinMode("+"pin"+i+","+"OUTPUT"+");");
	}
	System.out.println("}");

    /**
    *Ogni programma arduino necessita di una funzione "loop()" per essere eseguito.
    *Questa funzione viene eseguita in continuazione e determina il program-scan
    **/
	System.out.println("void loop(){");

	/**
    *All'inizio del program scan eseguiamo la lettura di tutte le variabili di input
    *tramite la funzione "digitalRead(args)";
    **/
	it = parser.getTableInput().entrySet().iterator();
    while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("	var"+i+"=digitalRead("+"pin"+i+");");
	}


	/**
    *Per ogni rung creaiamo un albero che descrive i suoi contatti
    **/
	ContactNode root;
	it = parser.getRungList().iterator();
	while(it.hasNext()){
	    Object obj = it.next();
		root=new ContactNode((Rung)obj);
		int maxTo=parser.findMax_ToValue_FromContactList((Rung)obj);
		if(!root.buildTree(0,maxTo)){
			parser.handleError(parser.INVALID_LADDER_DIAGRAM);
		}
		/******DEBUG-PRINT TREE*******/
		/*System.out.println("**************************************");
		root.visit();
		System.out.println("**************************************");*/

	/**
    *Attraversando l'albero relativo a un particolare rung in modo depth-first
    *otteniamo l'espressione logica relativa a un rung
    **/
		System.out.println("	if("+root.toString()+"){");
		if(((Coil)((Rung)obj).getSection2()).getType()==0)
			System.out.println("		"+"var"+((Coil)((Rung)obj).getSection2()).getPort()+"=HIGH;");
		else if(((Coil)((Rung)obj).getSection2()).getType()==1)
			System.out.println("		"+"var"+((Coil)((Rung)obj).getSection2()).getPort()+"=LOW;");
		System.out.println("	}else{");
		if(((Coil)((Rung)obj).getSection2()).getType()==0)
			System.out.println("		"+"var"+((Coil)((Rung)obj).getSection2()).getPort()+"=LOW;");
		else if(((Coil)((Rung)obj).getSection2()).getType()==1)
			System.out.println("		"+"var"+((Coil)((Rung)obj).getSection2()).getPort()+"=HIGH;");
		System.out.println("	}");
	}


	

	/******DEBUG-PRINT RUNG*******/
	/*System.out.println("**************************************");
	Object obj;
	it = parser.getRungList().iterator();
	while(it.hasNext()){
    	obj = it.next();
    	System.out.println("RUNG");
    	Iterator itr = ((Rung)obj).getSection1().iterator();
    	while(itr.hasNext()){
    	 obj = itr.next();
    	 System.out.println("CONTACT");
    	}

	}
	System.out.println("**************************************");*/

	/**
    *Alla fine del program scan eseguiamo la scrittura di tutte le variabili di output
    *tramite la funzione "digitalWrite(args)";
    **/
	it = parser.getTableOutput().entrySet().iterator();
    while (it.hasNext()) {
		Map.Entry pairs = (Map.Entry)it.next();
        int i=(int)pairs.getKey();
        System.out.println("	digitalWrite("+"pin"+i+","+"var"+i+");");
	}
	System.out.println("}");

:};

A ::= MIN QUESTION XML VERSION EQUAL N ENCODING EQUAL P QUESTION MAX B
{::}; 

B ::= MIN PROGRAM FOR EQUAL I MAX D MIN DIV PROGRAM MAX
{::};

D ::= D MIN RUNG MAX E MIN DIV RUNG MAX
{::};

D ::=
{: :};

E ::= MIN SECTION1 MAX F:section1 MIN DIV SECTION1 MAX MIN SECTION2 MAX G:section2 MIN DIV SECTION2 MAX
{:
	/**
    *Ogni rung è diviso in due sezioni section1 e section2
    *la section1 contiene solo contatti e la section2 solo un coil.
    *Quando facciamo la riduzione per E il rung è completo, quindi possiamo
    *creare un nuovo oggetto Rung e inserirlo nella RungList.
    **/
 	Rung rung=new Rung((ArrayList<Contact>)section1,(Coil)section2);
 	parser.getRungList().add(rung);
:};

F ::= F:array MIN CONTACT FROM EQUAL I:from TO EQUAL I:to PORT EQUAL I:port TYPE EQUAL I:type DIV MAX
{:


	if(type!=0&&type!=1){
		parser.handleError(parser.TYPE_IS_ONLY_0_OR_1);
	}

	/**
    *Quando facciamo la riduzione per F abbiamo trovato un nuovo contatto in input
    *Conserviamo le info relative a questo contatto inserendolo nella TableInput.
    **/
 	Contact contact=new Contact(from,to,port,type);
	if(parser.getTableOutput().containsKey(port))
	 parser.handleError(parser.PORT_IS_INPUT_OR_OUTPUT);
	else if(contact.getFrom()+1!=contact.getTo()){
        parser.handleError(parser.INVALID_LADDER_DIAGRAM);         
    }else{
	 if(!parser.getTableInput().containsKey(port)){
	 	parser.getTableInput().put(contact.getPort(),contact);
	 }
	}

	/**
    *Qui invece conserviamo tutti i contatti relativi allo stesso rung 
    *che costituiranno l'attributo section1 di F nella produzione E
    **/
	((ArrayList<Contact>)array).add(contact);

	RESULT=array;
:};

F ::=
{:
	/**
    *Se riduciamo per F stiamo iniziando il parsing di un nuovo rung
    *Quindi bisogna allocare la struttura che contiene i suoi contatti.
    **/
	ArrayList<Contact> listContact;
	listContact=new ArrayList<>();
	RESULT=listContact;
:};

G ::= MIN COIL PORT EQUAL I:port TYPE EQUAL I:type DIV MAX
{:

	if(type!=0&&type!=1){
		parser.handleError(parser.TYPE_IS_ONLY_0_OR_1);
	}

	/**
    *Quando facciamo la riduzione per G abbiamo trovato un coil in output
    *Conserviamo le info relative a questo coil inserendolo nella TableOutput.
    **/
	Coil coil=new Coil(port,type);
	if(parser.getTableInput().containsKey(port))
	 parser.handleError(parser.PORT_IS_INPUT_OR_OUTPUT);
	else{
	 if(!parser.getTableOutput().containsKey(port)){
	 	parser.getTableOutput().put(coil.getPort(),coil);
	 }
	}
	RESULT=coil;
:};


N ::= VERSION:val {:RESULT=val;:};
I ::= NUM:val {:RESULT=val;:};
P ::= ENCODING:val {:RESULT=val;:};


